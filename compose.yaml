services:
  db:
    image: postgres:16.1
    container_name: shareit
    ports:
      - "5434:5432"
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=shareit
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=12345
    healthcheck:
      test: pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 5s
      interval: 5s
      retries: 10
  init:
    image: postgres:16.1
    container_name: init
    depends_on:
      db:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        set -e
        psql postgresql://dbuser:12345@db:5432/shareit -v ON_ERROR_STOP=1 <<-EOSQL
        CREATE TABLE IF NOT EXISTS users (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          email VARCHAR(512) NOT NULL UNIQUE
        );
        
        CREATE TABLE IF NOT EXISTS requests (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
        description VARCHAR(512) NOT NULL,
        requestor_id BIGINT NOT NULL,
        created TIMESTAMP NOT NULL,
        FOREIGN KEY (requestor_id) REFERENCES users(id) ON DELETE CASCADE
        );
        
        CREATE TABLE IF NOT EXISTS items (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description VARCHAR(1000) NOT NULL,
        available BOOLEAN NOT NULL,
        owner_id BIGINT NOT NULL,
        request_id BIGINT NOT NULL,
        FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE cascade,
        FOREIGN KEY (request_id) REFERENCES requests(id) ON DELETE cascade
        );
        
        CREATE TABLE IF NOT EXISTS bookings (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
        start_time TIMESTAMP NOT NULL,
        end_time TIMESTAMP NOT NULL,
        item_id BIGINT NOT NULL,
        booker_id BIGINT NOT NULL,
        status VARCHAR(25) NOT NULL,
        FOREIGN KEY (booker_id) REFERENCES users(id) ON DELETE cascade,
        FOREIGN KEY (item_id) REFERENCES items(id) ON DELETE cascade
        );
        EOSQL